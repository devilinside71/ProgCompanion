{
	// Place your snippets for vba here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Check if file exists": {
		"prefix": "vbafileexists",
		"body": [
			"Private Function FileExists(ByRef filePath As Variant) As Boolean",
			"  'Check if file exists",
			"  'Parameters:",
			"  '  {Variant} filePath: File path to check",
			"  'Returns:",
			"  '  {Boolean} File exists",
			"  'Created by: Laszlo Tamas",
			"  'Licence: MIT",
			"  ",
			"  On Error GoTo FUNC_ERR",
			"  FileExists = Dir(filePath) <> vbNullString",
			"FUNC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Function",
			"FUNC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Function FileExists\"",
			"    clLogger.logERROR Err.Description, \"FileExists\"",
			"  End If",
			"  Resume FUNC_EXIT",
			"End Function",
			"",
			"Private Sub FileExistsTest()",
			"  'Test procedure for FileExists",
			"  'Check if file exists",
			"  ",
			"  Dim testVal As String",
			"  On Error GoTo PROC_ERR",
			"  testVal = \"C:\\Users\\tamas.laszlo9\\Documents\\Lightshot\\sys06x.png\"",
			"  clLogger.logDEBUG testVal & \" >> \" & FileExists(testVal), \"FileExistsTest\"",
			"PROC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Sub",
			"PROC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Sub FileExistsTest >> \" & Err.Description",
			"    clLogger.logERROR Err.Description, \"FileExistsTest\"",
			"  End If",
			"  Resume PROC_EXIT",
			"End Sub"
		],
		"description": "Check if file exists"
	},
	"Check if folder exists": {
		"prefix": "vbafolderexists",
		"body": [
			"Private Function FolderExists(ByRef FolderPath As Variant) As Boolean",
			"  'Check if folder exists",
			"  'Parameters:",
			"  '  {Variant} FolderPath: Folder path to check",
			"  'Returns:",
			"  '  {Boolean} Folder exists",
			"  'Created by: Laszlo Tamas",
			"  'Licence: MIT",
			"  ",
			"  On Error GoTo FUNC_ERR",
			"  FolderExists = Dir(FolderPath, vbDirectory) <> \"\"",
			"FUNC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Function",
			"FUNC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Function FolderExists\"",
			"    Call clLogger.logERROR(Err.Description, \"FolderExists\")",
			"  End If",
			"  Resume FUNC_EXIT",
			"End Function",
			"",
			"Private Sub FolderExistsTest()",
			"  'Test procedure for FolderExists",
			"  'Check if folder exists",
			"  ",
			"  Dim testVal As String",
			"  On Error GoTo PROC_ERR",
			"  testVal = \"C:\\Users\\tamas.laszlo9\\Documents\\Lightshot\\\"",
			"  Call clLogger.logDEBUG(testVal & \" >> \" & FolderExists(testVal), \"FolderExistsTest\")",
			"PROC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Sub",
			"PROC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Sub FolderExistsTest >> \" & Err.Description",
			"    Call clLogger.logERROR(Err.Description, \"FolderExistsTest\")",
			"  End If",
			"  Resume PROC_EXIT",
			"End Sub"
		],
		"description": "Check if folder exists"
	},
	"Refresh ON/OFF": {
		"prefix": "vbarefresh",
		"body": [
			"Private Sub RefreshOFF()",
			"  'Screen update OFF",
			"  With Application",
			"    .ScreenUpdating = False",
			"    .EnableEvents = False",
			"    '.Calculation = xlCalculationManual",
			"  End With",
			"End Sub",
			"Private Sub RefreshON()",
			"  'Screen update ON",
			"  With Application",
			"    .ScreenUpdating = True",
			"    .EnableEvents = True",
			"    '.Calculation = xlCalculationAutomatic",
			"  End With",
			"End Sub",
			""
		],
		"description": "Refresh ON/OFF"
	},
	"Open file dialog to select file(s)": {
		"prefix": "vbaselectfile",
		"body": [
			"Private Function SelectFile(ByVal Multiselect As Boolean, _",
			"                            ByVal DialogTitle As String, _",
			"                            ParamArray FileFilter() As Variant) As Variant",
			"  'Open file dialog to select file(s)",
			"  'Parameters:",
			"  '  {Boolean} Multiselect: Allow multiselect",
			"  '  {String} DialogTitle: Title of the dialog box",
			"  '  {Optional Variant()} FileFilter: Filter array, 1:Name, 2:Extensions",
			"  '      Example1: SelectFile(False, \"Select File\")",
			"  '      Example2: SelectFile(True, \"Select Files\")",
			"  '      Example3: SelectFile(True, \"Select Files\", \"Excel files\", \"*.xlsx,*.xls,*.xlsm\")",
			"  'Returns:",
			"  '  {Variant()} Path(s) to selected file(s)",
			"  'Created by: Laszlo Tamas",
			"  'Licence: MIT",
			"",
			"  Dim sPath() As String",
			"  Dim iChoice As Long",
			"  Dim dialogBox As FileDialog",
			"  Dim i As Long",
			"  ",
			"  On Error GoTo FUNC_ERR",
			"  ",
			"  Set dialogBox = Application.FileDialog(msoFileDialogOpen)",
			"  dialogBox.AllowMultiselect = Multiselect",
			"  dialogBox.Title = DialogTitle",
			"  dialogBox.Filters.Clear",
			"  If UBound(FileFilter) = 1 Then",
			"    dialogBox.Filters.Add FileFilter(0), FileFilter(1)",
			"  End If",
			"  iChoice = dialogBox.Show",
			"  If iChoice <> 0 Then",
			"    For i = 1 To dialogBox.SelectedItems.Count",
			"      ReDim Preserve sPath(i)",
			"      sPath(i) = dialogBox.SelectedItems.Item(i)",
			"    Next i",
			"  Else",
			"    ReDim Preserve sPath(1)",
			"    sPath(i) = vbNullString",
			"  End If",
			"  SelectFile = sPath",
			"  Set dialogBox = Nothing",
			"FUNC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Function",
			"FUNC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Function SelectFile >> \" & Err.Description",
			"    clLogger.logERROR Err.Description, \"SelectFile\"",
			"  End If",
			"  Resume FUNC_EXIT",
			"End Function",
			"",
			"Private Sub SelectFileTest()",
			"  'Test procedure for SelectFile",
			"  'Open file dialog to select file(s)",
			"  ",
			"  Dim sPath() As String",
			"  Dim sPaths As String",
			"  Dim i As Long",
			"  ",
			"  On Error GoTo PROC_ERR",
			"  sPaths = vbNullString",
			"'  sPath = SelectFile(False, \"Select File\")",
			"  'sPath = SelectFile(True, \"Select Files\")",
			"  sPath = SelectFile(True, \"Select Files\", \"Excel files\", \"*.xlsx,*.xls,*.xlsm\")",
			"  For i = 1 To UBound(sPath)",
			"    sPaths = sPaths + sPath(i) + \",\"",
			"  Next i",
			"  clLogger.logDEBUG sPaths, \"SelectFileTest\"",
			"PROC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Sub",
			"PROC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Sub SelectFileTest >> \" & Err.Description",
			"    clLogger.logERROR Err.Description, \"SelectFileTest\"",
			"  End If",
			"  Resume PROC_EXIT",
			"End Sub"
		],
		"description": "Open file dialog to select file(s)"
	},
	"Open file dialog to select folder": {
		"prefix": "vbaselectfolder",
		"body": [
			"Function SelectFolder(Optional ByVal DialogTitle As String = \"Select a folder\") As String",
			"  'Open file dialog to select folder",
			"  'Parameters:",
			"  '  {Optional String} DialogTitle: Title of the dialog box",
			"  'Returns:",
			"  '  {String} Path to selected folder",
			"  'Created by: Laszlo Tamas",
			"  'Licence: MIT",
			"  ",
			"  Dim folderDlg As FileDialog",
			"  Dim sItem As String",
			"  ",
			"  On Error GoTo FUNC_ERR",
			"    ",
			"  sItem = vbNullString",
			"  Set folderDlg = Application.FileDialog(msoFileDialogFolderPicker)",
			"  With folderDlg",
			"    .Title = DialogTitle",
			"    .AllowMultiselect = False",
			"    .InitialFileName = Application.DefaultFilePath",
			"    If .Show <> -1 Then GoTo NextCode",
			"    sItem = .SelectedItems(1)",
			"  End With",
			"NextCode:",
			"  SelectFolder = sItem",
			"  Set folderDlg = Nothing",
			"FUNC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Function",
			"FUNC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Function SelectFolder >> \" & Err.Description",
			"    clLogger.logERROR Err.Description, \"SelectFolder\"",
			"  End If",
			"  Resume FUNC_EXIT",
			"End Function",
			"",
			"Private Sub SelectFolderTest()",
			"  'Test procedure for SelectFolder",
			"  'Open file dialog to select folder",
			"  ",
			"  Dim sPath As String",
			"  ",
			"  On Error GoTo PROC_ERR",
			"  sPath = SelectFolder(\"Select a Folder\")",
			"  clLogger.logDEBUG sPath, \"SelectFolderTest\"",
			"PROC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Sub",
			"PROC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Sub GetFolderTest >> \" & Err.Description",
			"    clLogger.logERROR Err.Description, \"SelectFolderTest\"",
			"  End If",
			"  Resume PROC_EXIT",
			"End Sub",
			""
		],
		"description": "Open file dialog to select folder"
	},
	"Class module skeleton": {
		"prefix": "vbaclassmodule",
		"body": [
			"Option Explicit",
			"Private clLogger As New LoggerClass",
			"Private m_DefaultPath As String",
			"Private Const cmDefaultPath As String = vbNullString",
			"",
			"Public Property Let DefaultPath(DefaultPathParam As String)",
			"  On Error GoTo PROP_ERR",
			"  m_DefaultPath = DefaultPathParam",
			"  clLogger.logDEBUG \"${1:My}Class.Property.DefaultPath has been set to: \" & m_DefaultPath, \"$1Class.Property.Let.DefaultPath\"",
			"PROP_EXIT:",
			"  Exit Property",
			"PROP_ERR:",
			"  If Err.Number Then",
			"    clLogger.logERROR Err.Description, \"$1Class.Property.Let.DefaultPath\"",
			"  End If",
			"  Resume PROP_EXIT",
			"End Property",
			"",
			"Public Property Get DefaultPath() As String",
			"  On Error GoTo PROP_ERR",
			"  DefaultPath = m_DefaultPath",
			"PROP_EXIT:",
			"  Exit Property",
			"PROP_ERR:",
			"  If Err.Number Then",
			"    clLogger.logERROR Err.Description, \"$1Class.Property.Get.DefaultPath\"",
			"  End If",
			"  Resume PROP_EXIT",
			"End Property",
			"",
			"Private Sub Class_Initialize()",
			"  m_DefaultPath = cmDefaultPath",
			"  clLogger.logDEBUG \"Class $1Class initialized\", \"$1Class.Class_Initialize\"",
			"  clLogger.logDEBUG \"Class $1Class default value for DefaultPath: \" & m_DefaultPath, \"$1Class.Class_Initialize\"",
			"End Sub",
			"",
			"Private Sub Class_Terminate()",
			"  clLogger.logDEBUG \"Class $1Class terminated\", \"$1Class.Class_Terminate\"",
			"End Sub",
			"",
			"'****************************************************************************",
			"'Sub test$1Class()",
			"'  'Test for Class $1Class",
			"'  Dim clClass As New $1Class",
			"'  clClass.DefaultPath = \"dhskjad\"",
			"'End Sub",
			"",
			""
		],
		"description": "Class module skeleton"
	},
	"Get column number from column letter or header text": {
		"prefix": "vbacolnumber",
		"body": [
			"Private Function Col_Number(ByRef ColumnLetterOrHeader As String, Optional SheetName As String, _",
			"                            Optional ByRef HeadRow As Long = 1, Optional ByRef MaxCol As Long = 400) As Long",
			"  'Get column number from column letter or header text",
			"  'Parameters:",
			"  '  {Long} ColumnLetter: Column letter or Header text",
			"  '  {Optional String} SheetName: Sheet name",
			"  '  {Optional Long} HeadRow: Row to search for header",
			"  '  {Optional Long} MaxCol: Maximum column number to search",
			"  'Returns:",
			"  '  {Long} Column number",
			"  'Created by: Laszlo Tamas",
			"  'Licence: MIT",
			"  Dim sSheet As String",
			"  Dim i As Long",
			"  Dim sCell As String",
			"  Dim sColLetter As String",
			"  ",
			"  On Error GoTo FUNC_ERR",
			"  sSheet = Trim(CStr(SheetName))",
			"  sColLetter = Trim(CStr(ColumnLetterOrHeader))",
			"  Col_Number = 0",
			"  If sSheet <> \"\" Then",
			"    For i = 1 To MaxCol",
			"      sCell = Trim(CStr(Sheets(sSheet).Cells(HeadRow, i)))",
			"      If sCell = sColLetter Then",
			"        Col_Number = i",
			"        Exit For",
			"      End If",
			"    Next i",
			"  Else",
			"    Col_Number = Range(sColLetter & \"1\").Column",
			"  End If",
			"FUNC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Function",
			"FUNC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Function Col_Number\"",
			"    clLogger.logERROR Err.Description, \"Col_Number\"",
			"  End If",
			"  Resume FUNC_EXIT",
			"End Function",
			"",
			"Private Sub ColNumberTest()",
			"  'Test procedure for Col_Number",
			"  'Get number from column letter or header text",
			"  Dim testVal As String",
			"  ",
			"  On Error GoTo PROC_ERR",
			"  ",
			"  testVal = \"AX\"",
			"  clLogger.logDEBUG testVal & \" >> \" & Trim(CStr(Col_Number(testVal))), \"ColNumberTest\"",
			"  clLogger.logDEBUG \"Alma\" & \" \" & \"Munka1\" & \" >> \" & Trim(CStr(Col_Number(\"Alma\", \"Munka1\"))), \"ColNumberTest\"",
			"PROC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Sub",
			"PROC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Sub ColNumberTest >> \" & Err.Description",
			"    clLogger.logERROR Err.Description, \"ColNumberTest\"",
			"  End If",
			"  Resume PROC_EXIT",
			"End Sub"
		],
		"description": "Get number from column letter or header text"
	},
	"Get column letter from column number": {
		"prefix": "vbacolletter",
		"body": [
			"Private Function Col_Letter(ByRef ColumnNumber As Long) As String",
			"  'Get column letter from column number",
			"  'Parameters:",
			"  '  {Long} ColumnNumber: Column number",
			"  'Returns:",
			"  '  {String} Column letter",
			"  'Created by: Laszlo Tamas",
			"  'Licence: MIT",
			"  Dim vArr",
			"    ",
			"  On Error GoTo FUNC_ERR",
			"  ",
			"  vArr = Split(Cells(1, ColumnNumber).Address(True, False), \"$\")",
			"  Col_Letter = vArr(0)",
			"    ",
			"FUNC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Function",
			"FUNC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Function Col_Letter\"",
			"    clLogger.logERROR Err.Description, \"Col_Letter\"",
			"  End If",
			"  Resume FUNC_EXIT",
			"    ",
			"End Function",
			"",
			"Private Sub ColLetterTests()",
			"  'Test procedure for Col_Letter",
			"  'Get column letter from column number",
			"  Dim testVal As Long",
			"  ",
			"  On Error GoTo PROC_ERR",
			"  ",
			"  testVal = 48",
			"  clLogger.logDEBUG Trim(CStr(testVal)) & \" >> \" & Col_Letter(testVal), \"ColLetterTests\"",
			"PROC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Sub",
			"PROC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Sub ColLetterTests >> \" & Err.Description",
			"    clLogger.logERROR Err.Description, \"ColLetterTests\"",
			"  End If",
			"  Resume PROC_EXIT",
			"End Sub"
		],
		"description": "Get column letter from column number"
	},
	"Get last not empty row number": {
		"prefix": [
			"vbalastrow",
			"vbagetlastrow"
		],
		"body": [
			"Private Function GetLastRow(SheetName As String, CheckColumn As Long, _",
			"                            Optional ByRef BackwardCheck As Boolean = False, _",
			"                            Optional ByRef FirstRow As Long = 2, _",
			"                            Optional ByRef LastRow As Long = 600000) As Long",
			"  'Get last not empty row number",
			"  'Parameters:",
			"  '  {String} SheetName: Sheet name",
			"  '  {Long} CheckColumn: Column check is based on",
			"  '  {Optional Boolean} BackwardCheck: Check is executed backwards",
			"  '  {Optional Long} FirstRow: First checked row",
			"  '  {Optional Long} LastRow: Last checked row",
			"  'Returns:",
			"  '  {Long} Last not empty row of checked column",
			"  'Created by: Laszlo Tamas",
			"  'Licence: MIT",
			"  Dim i As Long",
			"  Dim sCell As String",
			"  Dim sSheet As String",
			"  Dim lStart As Long",
			"  Dim lEnd As Long",
			"  Dim lStep As Long",
			"  Dim lDiff As Long",
			"  Dim bEmpty As Boolean",
			"  Dim bIsEmpty As Boolean",
			"    ",
			"  On Error GoTo FUNC_ERR",
			"    ",
			"  sSheet = Trim(CStr(SheetName))",
			"  GetLastRow = 0",
			"  lStart = FirstRow",
			"  lEnd = LastRow",
			"  lStep = 1",
			"  lDiff = -1",
			"  bEmpty = True",
			"  If BackwardCheck Then",
			"    lStart = LastRow",
			"    lEnd = FirstRow",
			"    lStep = -1",
			"    lDiff = 0",
			"    bEmpty = False",
			"  End If",
			"  For i = lStart To lEnd Step lStep",
			"    bIsEmpty = False",
			"    sCell = Trim(CStr(Sheets(sSheet).Cells(i, CheckColumn)))",
			"    If sCell = \"\" Then bIsEmpty = True",
			"    If bEmpty = bIsEmpty Then",
			"      GetLastRow = i + lDiff",
			"      Exit For",
			"    End If",
			"  Next i",
			"FUNC_EXIT:",
			"  On Error GoTo 0",
			"  If GetLastRow < FirstRow Then",
			"    GetLastRow = FirstRow",
		    "  End If",
			"  Exit Function",
			"FUNC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Function GetLastRow\"",
			"    clLogger.logERROR Err.Description, \"GetLastRow\"",
			"  End If",
			"  Resume FUNC_EXIT",
			"End Function",
			"",
			"Private Sub GetLastRowTest()",
			"  'Test procedure for GetLastRow",
			"  'Get last not empty row number",
			"  Dim testSheet As String",
			"  Dim testCol As Long",
			"  Dim testBackward As Boolean",
			"  ",
			"  On Error GoTo PROC_ERR",
			"  ",
			"  testSheet = \"Munka1\"",
			"  testCol = 3",
			"  testBackward = False",
			"  clLogger.logDEBUG Trim(CStr(testCol)) & \" \" & testSheet & \" \" & CStr(testBackward) & _",
			"              \" >> \" & Trim(CStr(GetLastRow(testSheet, testCol, testBackward))), \"GetLastRowTest\"",
			"PROC_EXIT:",
			"  On Error GoTo 0",
			"  Exit Sub",
			"PROC_ERR:",
			"  If Err.Number Then",
			"    Debug.Print \"Error in Sub GetLastRowTest >> \" & Err.Description",
			"    clLogger.logERROR Err.Description, \"GetLastRowTest\"",
			"  End If",
			"  Resume PROC_EXIT",
			"End Sub"
		],
		"description": "Get last not empty row number"
	},
	"Print to console": {
		"prefix": "log",
		"body": [
			"${1|Dim,Private|} ${1:+jdskjda}",
			"$2"
		],
		"description": "Log output to console"
	}
}